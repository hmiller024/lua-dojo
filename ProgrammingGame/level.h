/// levelfile.h
///
/// This file represents a model for any given level file generated by the
/// Level Editor
/// JSON Serializable/Deserializable
///
/// Author: Gavin Kerr
/// Date: April 18, 2023

#ifndef LEVEL_H
#define LEVEL_H

// Qt Imports
#include <QJsonObject>
#include <QJsonArray>
#include <QJsonValue>
#include <QPoint>

// STL Imports
#include <vector>

// Project Imports
#include "tile.h"
#include "player.h"

#include <iostream>

class Level
{

public:

    /// @brief Default Constructor
    Level();

    /// @brief sort implementation for level title
    bool operator > (const Level& other) const {

        int firstColon = levelTitle.indexOf(":");
        int secondColon = other.levelTitle.indexOf(":");
        double lvl1Num = other.levelTitle.mid(0, firstColon).toDouble();
        double lvl2Num = this->levelTitle.mid(0, secondColon).toDouble();

        return lvl1Num > lvl2Num;

    }


    /// @brief Reads the data from the json object
    /// @param QJsonObject &json
    void read(const QJsonObject &json);


    /// @brief Takes in a move and then processes it
    /// @brief Returns a string if move is not possible
    QString processMove(QString move);


    ///////////////////////////////////////////////////////////////////////////
    /// Getters for required level data
    ///////////////////////////////////////////////////////////////////////////

    /// @brief Returns the levelSize
    /// @return int levelSize
    int getLevelSize();


    /// @brief Returns the levelGemCount
    /// @return int levelGemCount
    int getLevelGemCount();


    /// @brief Returns the starting level rotation
    /// int levelStartingRotation
    int getLevelStartingRotation();


    /// @brief Returns the levelAuthor
    /// @return QString levelAuthor
    QString getLevelAuthor();


    /// @brief Returns the levelTitle
    /// @return QString levelTitle
    QString getLevelTitle();


    /// @brief Returns the level type
    /// @return QString levelType
    QString getLevelType();


    /// @brief Returns the level objectives
    /// @return levelObjectives
    QString getLevelObjectives();


    /// @brief Returns the level description
    /// @return levelDescription
    QString getLevelDescription();


    /// @brief Returns the level hints
    /// @return levelHints
    QString getLevelHints();


    /// @brief Returns the prewritten level code
    /// @return levelPreWrittenCode
    QString getPreWrittenCode();


    /// @brief Returns the current world map
    /// @return vector<Tile> worldMap
    std::vector<Tile>& getLevelMap();


    /// @brief Returns the player
    /// @return Player player
    Player &getPlayer();


    void resetLevel();


    int getCollectedGemCount();

    ///////////////////////////////////////////////////////////////////////////
    /// Getters for optional level data
    ///////////////////////////////////////////////////////////////////////////

    /// @brief Returns the level time limit
    /// @return levelTimeLimit
    int getLevelTimeLimit();


    /// @brief Returns the level line limit
    /// @return levelLineLimit
    int getLevelLineLimit();


    /// @brief Returns the level instruction limit
    /// @return levelInstructionLimit
    int getLevelInstructionLimit();

    QPoint getEndPos();



private:

    // Json data objects
    int levelSize;
    int levelGemCount;
    int levelStartingRotation;
    QString levelAuthor;
    QString levelTitle;
    QString levelType;
    QString levelObjectives;
    QString levelDescription;
    QString levelHints;
    QString levelPreWrittenCode;

    // Optional level restrictions
    int levelTimeLimit;
    int levelLineLimit;
    int levelInstructionLimit;

    // Vector containing all tiles in the world
    std::vector<Tile> worldMap;

    // Player variable
    Player player;
    QPoint playerStart;
    QPoint levelEnd;
    int playerStartAngle;
    int collectedGems;

    // Validation variables
    bool isValid;

    /// @brief method used to check if the object at the point is a Wall
    /// @param Point at which to check the tile
    bool checkCollision(QPoint);

    /// @brief method used to check if the object at the point is a Gem
    /// @param Point at which to check the tile
    bool checkGem(QPoint);

};

#endif // LEVEL_H
